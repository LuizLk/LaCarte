"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const typeorm_1 = require("typeorm");
const typedi_1 = require("typedi");
/**
 * Allows to inject a custom Repository using typedi's Container.
 * Use it to get the repository class decorated with @EntityRepository decorator.
 */
function OrmCustomRepository(cls, connectionName = "default") {
    return function (object, propertyName, index) {
        typedi_1.Container.registerHandler({ object, index, propertyName, value: () => {
                const connectionManager = typedi_1.Container.get(typeorm_1.ConnectionManager);
                if (!connectionManager.has(connectionName))
                    throw new Error(`Cannot get connection "${connectionName}" from the connection manager. ` +
                        `Make sure you have created such connection. Also make sure you have called useContainer(Container) ` +
                        `in your application before you established a connection and importing any entity.`);
                const connection = connectionManager.get(connectionName);
                return connection.getCustomRepository(cls);
            } });
    };
}
exports.OrmCustomRepository = OrmCustomRepository;
//# sourceMappingURL=OrmCustomRepository.js.map